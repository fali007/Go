object oriented approach and go approach

Object oriented:
	Class:
		class variables
		functions
	Instance of class

Go approach:
	Structure is created
		it contains variables
	Functions which can receive struct

folder structure:
	main.go <-> deck.go <-> deck_test.go

	main.go will create and manipulate deck
	deck.go will contain all the functions and variables associated with deck
	deck_test.go will contain the test cases, which will be run automatically.

Receiver functions:
	Syntax:
		func (receiver) func_name (){

		}
	Any variable of this type have access to this function.

If we have to declare but never use a variable we use '_'

Indexing slice : [Start Index Including : End Index Excluding]

Byte slice : Every element represent will be a character - computer way for a string.

Type Conversion : typeWeWant(valueToChange)

Testing with go:
	filename should be _test.go

	What to test - 

Struct with go:
	zero value - string ""
	int 0
	float 0
	bool false

* infront of type - tells its just the address
* infront of variable - is the value in that memory loc


gotchas - array and slice in go.
	array - primitive, cant resize, rarely used
	slice - can grow and shrink

Slice  - [pointer to first element, capacity, length]
	so when passing the slice we are actually passing the pointer.
	slice, map, functions, pointer, channels - reference typetype
	int, float, string - value type

Maps
	collection of key value pair
	all the keys should of same type and all the value should be of same type